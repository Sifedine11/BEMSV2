====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\AuthenticatedSessionController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(route('dashboard', absolute: false));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\ConfirmablePasswordController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\EmailVerificationNotificationController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\EmailVerificationPromptController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard', absolute: false))
                    : view('auth.verify-email');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\NewPasswordController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\PasswordController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\PasswordResetLinkController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\RegisteredUserController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\Utilisateur;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;

class RegisteredUserController extends Controller
{
    /**
     * Affiche la vue d'inscription (tu peux la masquer si tu ne veux pas de self-register).
     */
    public function create()
    {
        return view('auth.register');
    }

    /**
     * Gère l'inscription.
     */
    public function store(Request $request)
    {
        $request->validate([
            'nom_complet' => ['required', 'string', 'max:150'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:191', 'unique:utilisateurs,email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = Utilisateur::create([
            'nom_complet' => $request->nom_complet,
            'email' => $request->email,
            'mot_de_passe' => Hash::make($request->password), // ✅
            'role' => 'chauffeur', // rôle par défaut, tu peux changer
            'actif' => 1,
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect()->intended(route('dashboard', absolute: false));
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Auth\VerifyEmailController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Chauffeur\DisponibiliteController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Chauffeur;

use App\Http\Controllers\Controller;
use App\Models\CreneauDisponibilite;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;

class DisponibiliteController extends Controller
{
    public function index(Request $request)
    {
        $userId = Auth::id();

        $today = Carbon::today();
        $now   = Carbon::now();

        // Date sélectionnée pour l’éditeur en haut (par défaut aujourd’hui)
        $dateSelection = $request->input('date', $today->toDateString());

        // Créneaux DU JOUR sélectionné (comme avant)
        $creneauxDuJour = CreneauDisponibilite::query()
            ->where('utilisateur_id', $userId)
            ->whereDate('date_jour', $dateSelection)
            ->orderBy('heure_debut')
            ->get();

        // --- NOUVEAU : Toutes les disponibilités FUTURES ou EN COURS ---
        // Règle d’affichage :
        //  - date_jour > today  => toutes
        //  - date_jour = today  => seulement celles dont heure_fin >= maintenant
        $prochainesDispos = CreneauDisponibilite::query()
            ->where('utilisateur_id', $userId)
            ->where(function ($q) use ($today, $now) {
                $q->whereDate('date_jour', '>', $today)
                  ->orWhere(function ($qq) use ($today, $now) {
                      $qq->whereDate('date_jour', '=', $today)
                         ->where('heure_fin', '>=', $now->format('H:i:s'));
                  });
            })
            ->orderBy('date_jour')
            ->orderBy('heure_debut')
            ->get();

        return view('chauffeur.disponibilites.index', [
            'dateSelection'   => $dateSelection,
            'creneauxDuJour'  => $creneauxDuJour,
            'prochainesDispos'=> $prochainesDispos,
        ]);
    }

    public function store(Request $request)
    {
        $userId = Auth::id();

        $validated = $request->validate([
            'date'        => ['required', 'date'],
            'heure_debut' => ['required', 'date_format:H:i'],
            'heure_fin'   => ['required', 'date_format:H:i', 'after:heure_debut'],
            'repeter'     => ['nullable', Rule::in(['1'])],
        ]);

        $date = Carbon::parse($validated['date'])->toDateString();
        $hd   = $validated['heure_debut'] . ':00';
        $hf   = $validated['heure_fin']   . ':00';

        // Créneau du jour
        CreneauDisponibilite::firstOrCreate([
            'utilisateur_id' => $userId,
            'date_jour'      => $date,
            'heure_debut'    => $hd,
            'heure_fin'      => $hf,
        ]);

        // Répéter toutes les semaines (optionnel)
        if ($request->boolean('repeter')) {
            // on crée +4 semaines (ajuste si tu veux)
            $start = Carbon::parse($date)->copy();
            for ($i = 1; $i <= 4; $i++) {
                $d = $start->copy()->addWeeks($i)->toDateString();
                CreneauDisponibilite::firstOrCreate([
                    'utilisateur_id' => $userId,
                    'date_jour'      => $d,
                    'heure_debut'    => $hd,
                    'heure_fin'      => $hf,
                ]);
            }
        }

        return back()->with('ok', 'Disponibilité ajoutée.');
    }

    public function destroy($id)
    {
        $userId = Auth::id();

        $slot = CreneauDisponibilite::where('utilisateur_id', $userId)->findOrFail($id);
        $slot->delete();

        return back()->with('ok', 'Créneau supprimé.');
    }

    public function destroyJour(Request $request)
    {
        $userId = Auth::id();
        $request->validate(['date' => 'required|date']);
        $date = Carbon::parse($request->input('date'))->toDateString();

        CreneauDisponibilite::where('utilisateur_id', $userId)
            ->whereDate('date_jour', $date)
            ->delete();

        return back()->with('ok', 'Tous les créneaux de la date ont été supprimés.');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Chauffeur\PlanningController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Chauffeur;

use App\Http\Controllers\Controller;

class PlanningController extends Controller
{
    public function semaine()
    {
        return view('chauffeur.planning.semaine');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Controller.php
----------------------------------------------------
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Coordinateur\AttributionController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Coordinateur;

use App\Http\Controllers\Controller;
use App\Models\Course;
use App\Models\Utilisateur;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class AttributionController extends Controller
{
    public function index(Request $request)
    {
        $courses = Course::query()
            ->whereNull('chauffeur_id')
            ->whereIn('statut', ['importe', 'planifie'])
            ->orderBy('date_service')
            ->orderBy('heure_depart')
            ->paginate(20);

        $chauffeurs = Utilisateur::query()
            ->where('role', 'chauffeur')
            ->where('actif', 1)
            ->orderBy('nom_complet')
            ->get(['id', 'nom_complet']);

        return view('coordinateur.courses.a_attribuer', compact('courses', 'chauffeurs'));
    }

    public function planifiees(Request $request)
    {
        $courses = Course::query()
            ->whereNotNull('chauffeur_id')
            ->whereIn('statut', ['planifie', 'confirme'])
            ->with(['client:id,nom,prenom', 'chauffeur:id,nom_complet'])
            ->orderBy('date_service')
            ->orderBy('heure_depart')
            ->paginate(20);

        return view('coordinateur.courses.planifiees', compact('courses'));
    }

    public function attribuer(Request $request, Course $course)
    {
        $data = $request->validate([
            'chauffeur_id' => ['required','integer','exists:utilisateurs,id'],
        ]);

        DB::transaction(function () use ($course, $data) {
            $course->chauffeur_id = $data['chauffeur_id'];
            if ($course->statut === 'importe') {
                $course->statut = 'planifie';
            }
            $course->save();
        });

        return back()->with('status', 'Chauffeur attribué avec succès.');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Coordinateur\CourseController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Coordinateur;

use App\Http\Controllers\Controller;

class CourseController extends Controller
{
    public function aAttribuer()
    {
        return view('coordinateur.courses.a_attribuer');
    }

    public function planifiees()
    {
        return view('coordinateur.courses.planifiees');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\ProfileController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\RedirectionController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;

class RedirectionController extends Controller
{
    public function apresLogin()
    {
        $user = Auth::user();

        if (!$user) {
            return redirect()->route('login');
        }

        switch ($user->role) {
            case 'telephoniste':
                return redirect()->route('telephoniste.import.nouveau');
            case 'coordinateur':
                return redirect()->route('coordinateur.courses.a_attribuer');
            case 'chauffeur':
                return redirect()->route('chauffeur.dispo.index');
            case 'admin':
                // Mets ici la page d’accueil admin souhaitée
                return redirect()->route('admin.utilisateurs.index', [], false) ?? redirect()->route('tableau');
            default:
                return redirect()->route('tableau');
        }
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Telephoniste\HistoriqueImportController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Telephoniste;

use App\Http\Controllers\Controller;
use App\Models\LotImport;

class HistoriqueImportController extends Controller
{
    public function index()
    {
        // Pagination (12 par page), avec l’utilisateur importeur
        $lots = LotImport::with('importeur')
            ->orderByDesc('commence_le')
            ->orderByDesc('id')
            ->paginate(12);

        // Vue utilisée: resources/views/telephoniste/imports/historique.blade.php
        return view('telephoniste.imports.historique', compact('lots'));
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Controllers\Telephoniste\ImportCoursController.php
----------------------------------------------------
<?php

namespace App\Http\Controllers\Telephoniste;

use App\Http\Controllers\Controller;
use App\Http\Requests\Telephoniste\ImportCoursRequest;
use App\Models\CodePostal;
use App\Models\Client;
use App\Models\Course;
use App\Models\LigneImport;
use App\Models\LotImport;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use PhpOffice\PhpSpreadsheet\IOFactory;

class ImportCoursController extends Controller
{
    // Dossier unique d’import (conforme à ton arborescence)
    private const IMPORT_DIR = 'private/imports_tmp';

    public function index()
    {
        return view('telephoniste.import.index');
    }

    /**
     * Upload + prévisualisation (20 premières lignes).
     */
    public function previsualiser(ImportCoursRequest $request)
    {
        $fichier = $request->file('fichier');

        // 1) Dossier garanti
        Storage::disk('local')->makeDirectory(self::IMPORT_DIR);

        // 2) Enregistrement sous storage/app/private/imports_tmp/...
        $nomFinal = uniqid('import_') . '_' . preg_replace('/[^\w\-.]+/u', '_', $fichier->getClientOriginalName());
        $chemin   = $fichier->storeAs(self::IMPORT_DIR, $nomFinal, 'local'); // <-- chemin relatif à storage/app

        // 3) Vérification avec Storage
        if (!Storage::disk('local')->exists($chemin)) {
            return back()->withErrors([
                'fichier' => "Fichier introuvable après l’upload (chemin: {$chemin}). Vérifie les droits d’écriture de storage/app."
            ]);
        }
        $fullPath = Storage::disk('local')->path($chemin);

        // 4) Lecture classeur
        $spreadsheet = IOFactory::load($fullPath);
        $sheet = $spreadsheet->getSheetByName('Transfert') ?? $spreadsheet->getSheet(0);
        $tableau = $sheet->toArray(null, true, true, false);

        if (empty($tableau) || count($tableau) < 2) {
            return back()->withErrors(['fichier' => 'Impossible de lire des données (onglet "Transfert").']);
        }

        // 5) Headers + aperçu
        $headers = $this->normalizeHeaders(array_map('strval', array_shift($tableau)));
        $apercu = [];
        foreach (array_slice($tableau, 0, 20) as $row) {
            $apercu[] = $this->assocByHeaders($headers, $row);
        }

        // 6) Session d’import
        $token = 'import_' . bin2hex(random_bytes(8));
        session([
            'import_token' => $token,
            $token => [
                'chemin'           => $chemin, // ex: private/imports_tmp/...
                'headers'          => $headers,
                'fichier_original' => $fichier->getClientOriginalName(),
                'total_lignes'     => count($tableau),
            ]
        ]);

        return back()->with([
            'status'           => 'Fichier chargé. Vérifie la prévisualisation puis confirme.',
            'previsualisation' => $apercu,
            'headers'          => $headers,
            'token_import'     => $token,
            'fichier_nom'      => $fichier->getClientOriginalName(),
        ]);
    }

    /**
     * Confirmation = création lot + lignes_import + courses (statut=importe).
     */
    public function confirmer(Request $request)
    {
        $request->validate([
            'token_import' => ['required','string']
        ]);

        $token = (string) $request->input('token_import');

        $session = session($token);
        if (!is_array($session)) {
            return redirect()->route('telephoniste.import.nouveau')
                ->with('status', 'Session d’import expirée ou invalide. Recommencez.');
        }

        $chemin  = $session['chemin']  ?? null;   // ex: private/imports_tmp/...
        $headers = $session['headers'] ?? null;

        if (!$chemin || !$headers) {
            return redirect()->route('telephoniste.import.nouveau')
                ->with('status', 'Données d’import manquantes. Recommencez.');
        }

        // ✅ Vérification avec Storage (même disque/chemin qu’à l’upload)
        if (!Storage::disk('local')->exists($chemin)) {
            return redirect()->route('telephoniste.import.nouveau')
                ->withErrors(['fichier' => "Fichier introuvable ({$chemin}). Le fichier a peut-être été supprimé ou déplacé. Refais la prévisualisation."]);
        }
        $fullPath = Storage::disk('local')->path($chemin);

        // Lecture
        $spreadsheet = IOFactory::load($fullPath);
        $sheet = $spreadsheet->getSheetByName('Transfert') ?? $spreadsheet->getSheet(0);
        $tableau = $sheet->toArray(null, true, true, false);
        if (empty($tableau) || count($tableau) < 2) {
            return redirect()->route('telephoniste.import.nouveau')
                ->withErrors(['fichier' => 'Impossible de relire des données.']);
        }
        array_shift($tableau); // en-têtes

        $lot = new LotImport([
            'fichier_source' => $session['fichier_original'] ?? basename($chemin),
            'importe_par_id' => auth()->id(),
            'commence_le'    => now(),
            'lignes_total'   => count($tableau),
            'lignes_ok'      => 0,
            'lignes_erreur'  => 0,
            'journal'        => [],
        ]);
        $lot->save();
        $journal = [];
        $ok = 0; $ko = 0;

        DB::beginTransaction();
        try {
            foreach ($tableau as $index => $row) {
                $assoc = $this->assocByHeaders($headers, $row);
                $ligneImport = new LigneImport([
                    'lot_import_id' => $lot->id,
                    'ligne_brute'   => $assoc,
                    'statut'        => 'ok',
                    'created_at'    => now(),
                ]);

                try {
                    $course = $this->creerCourseDepuisExcel($assoc, $lot->id);
                    $ligneImport->course_id = $course?->id;
                    $ligneImport->save();
                    $ok++;
                } catch (\Throwable $e) {
                    $ligneImport->statut = 'erreur';
                    $ligneImport->message_erreur = $e->getMessage();
                    $ligneImport->save();
                    $ko++;
                    $journal[] = "Ligne ".($index+2).": ".$e->getMessage();
                }
            }

            $lot->lignes_ok = $ok;
            $lot->lignes_erreur = $ko;
            $lot->termine_le = now();
            $lot->journal = $journal;
            $lot->save();

            DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            return redirect()->route('telephoniste.import.nouveau')
                ->withErrors(['fichier' => 'Erreur durant l’import: '.$e->getMessage()]);
        } finally {
            // Nettoyage session
            session()->forget(['import_token', $token]);
        }

        return redirect()->route('telephoniste.imports.index')
            ->with('status', "Import terminé: {$ok} ok, {$ko} erreurs.");
    }

    // ---------- Helpers ----------

    private function normalizeHeaders(array $headers): array
    {
        $out = [];
        foreach ($headers as $h) {
            $h = trim((string)$h);
            $h = strtr($h, ['à'=>'a','â'=>'a','ä'=>'a','é'=>'e','è'=>'e','ê'=>'e','ë'=>'e','î'=>'i','ï'=>'i','ô'=>'o','ö'=>'o','û'=>'u','ü'=>'u','ç'=>'c','À'=>'A','Â'=>'A','Ä'=>'A','É'=>'E','È'=>'E','Ê'=>'E','Ë'=>'E','Î'=>'I','Ï'=>'I','Ô'=>'O','Ö'=>'O','Û'=>'U','Ü'=>'U','Ç'=>'C']);
            $h = strtolower($h);
            $h = preg_replace('/[^a-z0-9]+/','_', $h);
            $h = trim($h, '_');
            $out[] = $h;
        }
        return $out;
    }

    private function assocByHeaders(array $headers, array $row): array
    {
        $assoc = [];
        foreach ($headers as $i => $key) {
            $assoc[$key] = array_key_exists($i, $row) ? (is_string($row[$i]) ? trim($row[$i]) : $row[$i]) : null;
        }
        return $assoc;
    }

    private function parseDate(?string $d): ?string
    {
        if (!$d) return null;
        try { return Carbon::createFromFormat('d.m.Y', $d)->format('Y-m-d'); } catch (\Throwable $e) {}
        if (strtotime($d)) return Carbon::parse($d)->format('Y-m-d');
        return null;
    }

    private function parseTime(?string $t): ?string
    {
        if (!$t) return null;
        $t = str_replace('.', ':', $t);
        try { return Carbon::parse($t)->format('H:i:s'); } catch (\Throwable $e) { return null; }
    }

    private function parseDateTime(?string $d): ?string
    {
        if (!$d) return null;
        $d = str_replace('.', '-', $d);
        try { return Carbon::parse($d)->format('Y-m-d H:i:s'); } catch (\Throwable $e) { return null; }
    }

    private function extractCodePostalIdFromAdresse(?string $adresse): ?int
    {
        if (!$adresse) return null;
        if (preg_match('/\b(\d{4})\b/', $adresse, $m)) {
            $cp = $m[1];
            $code = CodePostal::where('code_postal', $cp)->first();
            return $code?->id;
        }
        return null;
    }

    private function findOrCreateClient(array $row): Client
    {
        $prenom = Arr::get($row, 'prenom') ?? Arr::get($row, 'pre_nom') ?? '';
        $nom    = Arr::get($row, 'nom') ?? '';
        $mobile = Arr::get($row, 'mobile') ?? null;
        $fixe   = Arr::get($row, 'fixe') ?? null;

        $client = Client::whereRaw('LOWER(nom) = ? AND LOWER(prenom) = ?', [mb_strtolower($nom), mb_strtolower($prenom)])->first();
        if ($client) {
            if (!$client->tel_mobile && $mobile) $client->tel_mobile = $mobile;
            if (!$client->tel_fixe && $fixe) $client->tel_fixe = $fixe;
            $client->save();
            return $client;
        }

        return Client::create([
            'nom'         => $nom ?: 'Inconnu',
            'prenom'      => $prenom ?: 'Inconnu',
            'tel_mobile'  => $mobile,
            'tel_fixe'    => $fixe,
            'actif'       => 1,
        ]);
    }

    private function creerCourseDepuisExcel(array $row, int $lotId): Course
    {
        $dateService   = $this->parseDate(Arr::get($row, 'date'));
        $heureDepart   = $this->parseTime(Arr::get($row, 'heure_de_depart'));
        $heureArrivee  = $this->parseTime(Arr::get($row, 'arrivee_souhaitee'));
        $type          = strtoupper((string) Arr::get($row, 'type'));
        if (!in_array($type, ['A','D','R'], true)) $type = 'A';

        $depart        = Arr::get($row, 'depart');
        $arrivee       = Arr::get($row, 'arrivee');
        $tempAt        = (string) Arr::get($row, 'tempat');
        $hclass        = $this->parseTime(Arr::get($row, 'hclass'));
        $distCalc      = $this->toDecimal(Arr::get($row, 'distance_calculee'));
        $distCyble     = $this->toDecimal(Arr::get($row, 'distance_cyble'));
        $utilPrix      = $this->toBool(Arr::get($row, 'utiliser_prix_communique'));
        $reserveLe     = $this->parseDateTime(Arr::get($row, 'reserve_le'));

        $client        = $this->findOrCreateClient($row);

        $course = new Course([
            'date_service'             => $dateService,
            'heure_depart'             => $heureDepart,
            'heure_arrivee'            => $heureArrivee,
            'type_course'              => $type,
            'statut'                   => 'importe',

            'client_id'                => $client->id,
            'chauffeur_id'             => null,
            'destination_id'           => null,

            'adresse_depart'           => $depart,
            'code_postal_depart_id'    => $this->extractCodePostalIdFromAdresse($depart),
            'adresse_arrivee'          => $arrivee,
            'code_postal_arrivee_id'   => $this->extractCodePostalIdFromAdresse($arrivee),

            'temps_attente_min'        => $this->toMinutes($tempAt),
            'heure_classement'         => $hclass,
            'distance_km'              => $distCalc,
            'distance_source_km'       => $distCyble,
            'utiliser_prix_communique' => $utilPrix,

            'commentaires'             => $this->composeCommentaires($row),
            'lot_import_id'            => $lotId,
            'reserve_le'               => $reserveLe,
        ]);
        $course->save();

        return $course;
    }

    private function composeCommentaires(array $row): ?string
    {
        $pieces = [];
        foreach ([
            'type_assurance' => 'Assurance',
            'instructions_ponctuelles_au_transporteur' => 'Instr. transporteur',
            'informations_aux_coordinateurs' => 'Info coordinateurs',
            'moyens_auxiliaires' => 'Moyens',
            'prestataire' => 'Prestataire',
            'vehicule' => 'Véhicule',
            'ville_hors_ville' => 'Zone',
            'pc' => 'PC',
            'rfm' => 'RFM',
        ] as $key => $label) {
            $val = Arr::get($row, $key);
            if ($val !== null && $val !== '') $pieces[] = $label.': '.$val;
        }
        return empty($pieces) ? null : implode(' | ', $pieces);
    }

    private function toMinutes($val): int
    {
        if ($val === null || $val === '') return 0;
        $s = (string)$val;
        if (preg_match('/^\d+$/', $s)) return (int)$s;
        try { $c = Carbon::parse($s); return $c->hour * 60 + $c->minute; } catch (\Throwable $e) { return 0; }
    }

    private function toDecimal($val): ?string
    {
        if ($val === null || $val === '') return null;
        $s = str_replace([' ', '’', "'"], '', (string)$val);
        $s = str_replace(',', '.', $s);
        return is_numeric($s) ? number_format((float)$s, 2, '.', '') : null;
    }

    private function toBool($val): bool
    {
        $s = strtoupper(trim((string)$val));
        return in_array($s, ['1','OUI','O','YES','Y','TRUE'], true);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Kernel.php
----------------------------------------------------
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * Middleware global sur toutes les requêtes HTTP.
     */
    protected $middleware = [
        // Proxies / CORS / maintenance / taille de requête / trim / etc.
        \Illuminate\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Http\Middleware\ValidatePostSize::class,
        \Illuminate\Foundation\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePathEncoding::class,
        \Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks::class,
    ];

    /**
     * Groupes de middleware.
     */
    protected $middlewareGroups = [
        'web' => [
            \Illuminate\Cookie\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \Illuminate\Foundation\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            // \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * Aliases de middleware utilisables dans les routes.
     */
    protected $middlewareAliases = [
        // Laravel natifs
        'auth'       => \Illuminate\Auth\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can'        => \Illuminate\Auth\Middleware\Authorize::class,
        'guest'      => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed'     => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle'   => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified'   => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

        // >>> Alias pour notre middleware de rôle
        'role'       => \App\Http\Middleware\RoleMiddleware::class,
    ];
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Middleware\EnsureRole.php
----------------------------------------------------
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class EnsureRole
{
    public function handle(Request $request, Closure $next, string $role)
    {
        $user = $request->user();
        if (!$user || $user->role !== $role) {
            abort(403, 'Accès refusé.');
        }
        return $next($request);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Middleware\RoleMiddleware.php
----------------------------------------------------
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RoleMiddleware
{
    /**
     * Usage route :
     *   ->middleware('role:telephoniste')
     *   ->middleware('role:admin,telephoniste')
     */
    public function handle(Request $request, Closure $next, ...$roles)
    {
        $user = Auth::user();

        if (!$user) {
            // Laisse 'auth' rediriger vers /login
            abort(401, 'Non authentifié');
        }

        $userRole = $user->role;

        if (empty($roles)) {
            return $next($request); // pas de filtre si rien passé
        }

        if (!in_array($userRole, $roles, true)) {
            abort(403, 'Accès refusé');
        }

        return $next($request);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Requests\Auth\LoginRequest.php
----------------------------------------------------
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Requests\ProfileUpdateRequest.php
----------------------------------------------------
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Http\Requests\Telephoniste\ImportCoursRequest.php
----------------------------------------------------
<?php

namespace App\Http\Requests\Telephoniste;

use Illuminate\Foundation\Http\FormRequest;

class ImportCoursRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true; // routes déjà protégées par 'auth' + 'role:telephoniste'
    }

    public function rules(): array
    {
        return [
            'fichier' => ['required', 'file', 'mimes:xlsx', 'max:10240'], // 10 Mo
        ];
    }

    public function messages(): array
    {
        return [
            'fichier.required' => 'Veuillez sélectionner un fichier Excel.',
            'fichier.mimes'    => 'Le fichier doit être au format .xlsx.',
            'fichier.max'      => 'Le fichier est trop volumineux (max 10 Mo).',
        ];
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\Client.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Client extends Model
{
    protected $table = 'clients';

    protected $fillable = [
        'nom','prenom','genre','adresse','code_postal_id','localite',
        'tel_mobile','tel_fixe','contact_urgence_nom','contact_urgence_tel',
        'moyens_auxiliaires','niveau_aide','consignes_chauffeur','consignes_detail',
        'date_naissance','actif','carte_legale_tmr',
    ];

    public function codePostal()
    {
        return $this->belongsTo(CodePostal::class, 'code_postal_id');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\CodePostal.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class CodePostal extends Model
{
    protected $table = 'codes_postaux';
    protected $fillable = [
        'code_postal','localite','tarif_forfaitaire',
    ];
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\Course.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Course extends Model
{
    protected $table = 'courses';
    public $timestamps = true;

    protected $fillable = [
        'date_service',
        'heure_depart',
        'heure_arrivee',
        'type_course',
        'statut',
        'client_id',
        'chauffeur_id',
        'destination_id',
        'adresse_depart',
        'code_postal_depart_id',
        'adresse_arrivee',
        'code_postal_arrivee_id',
        'temps_attente_min',
        'heure_classement',
        'distance_km',
        'distance_source_km',
        'prix_aller_calcule',
        'prix_retour_calcule',
        'utiliser_prix_communique',
        'commentaires',
        'lot_import_id',
        'reserve_le',
    ];

    protected $casts = [
        'date_service' => 'date',
        'heure_depart' => 'datetime:H:i:s',
        'heure_arrivee'=> 'datetime:H:i:s',
        'reserve_le'   => 'datetime',
        'utiliser_prix_communique' => 'boolean',
    ];

    public function client(): BelongsTo
    {
        return $this->belongsTo(Client::class);
    }

    public function chauffeur(): BelongsTo
    {
        return $this->belongsTo(Utilisateur::class, 'chauffeur_id');
    }

    public function destination(): BelongsTo
    {
        return $this->belongsTo(Destination::class, 'destination_id');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\CreneauDisponibilite.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class CreneauDisponibilite extends Model
{
    protected $table = 'creneaux_disponibilite';

    protected $fillable = [
        'utilisateur_id',
        'date_jour',
        'heure_debut',
        'heure_fin',
    ];

    protected $casts = [
        'date_jour'   => 'date',
        'heure_debut' => 'datetime:H:i',
        'heure_fin'   => 'datetime:H:i',
    ];

    public function utilisateur()
    {
        return $this->belongsTo(Utilisateur::class, 'utilisateur_id');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\LigneImport.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class LigneImport extends Model
{
    protected $table = 'lignes_import';
    public $timestamps = false;

    protected $fillable = [
        'lot_import_id',
        'ligne_brute',
        'statut',
        'message_erreur',
        'course_id',
        'created_at',
    ];

    protected $casts = [
        'ligne_brute' => 'array',
        'created_at'  => 'datetime',
    ];

    public function lot(): BelongsTo
    {
        return $this->belongsTo(LotImport::class, 'lot_import_id');
    }

    public function course(): BelongsTo
    {
        return $this->belongsTo(Course::class, 'course_id');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\LotImport.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class LotImport extends Model
{
    protected $table = 'lots_imports';
    public $timestamps = false; // la table n'a pas created_at / updated_at

    protected $fillable = [
        'fichier_source',
        'importe_par_id',
        'commence_le',
        'termine_le',
        'lignes_total',
        'lignes_ok',
        'lignes_erreur',
        'journal',
    ];

    protected $casts = [
        'commence_le'  => 'datetime',
        'termine_le'   => 'datetime',
        'journal'      => 'array',
        'lignes_total' => 'integer',
        'lignes_ok'    => 'integer',
        'lignes_erreur'=> 'integer',
    ];

    /** Utilisateur qui a lancé l'import */
    public function importeur(): BelongsTo
    {
        // Attention: ton modèle d’utilisateur s’appelle Utilisateur (pas User)
        return $this->belongsTo(Utilisateur::class, 'importe_par_id');
    }

    /** Lignes d'import liées */
    public function lignes(): HasMany
    {
        return $this->hasMany(LigneImport::class, 'lot_import_id');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Models\Utilisateur.php
----------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class Utilisateur extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $table = 'utilisateurs';

    // Breeze/Guard vont utiliser 'email' + getAuthPassword()
    protected $fillable = [
        'nom_complet',
        'email',
        'mot_de_passe',
        'tel_mobile',
        'tel_fixe',
        'role',
        'actif',
    ];

    protected $hidden = [
        'mot_de_passe',
        'remember_token',
    ];

    protected $casts = [
        'email_verifie_le' => 'datetime',
        'actif' => 'boolean',
    ];

    // ✅ Très important : indique à Laravel où se trouve le password
    public function getAuthPassword()
    {
        return $this->mot_de_passe;
    }

    // Helper rôle(s)
    public function hasRole(string $role): bool
    {
        return $this->role === $role;
    }

    // Pour compat vue Breeze qui affiche "name"
    public function getNameAttribute(): string
    {
        return $this->nom_complet ?? $this->email;
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Providers\AppServiceProvider.php
----------------------------------------------------
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\Providers\AuthServiceProvider.php
----------------------------------------------------
<?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    protected $policies = [
    ];

    public function boot(): void
    {

    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\View\Components\AppLayout.php
----------------------------------------------------
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\app\View\Components\GuestLayout.php
----------------------------------------------------
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\app.php
----------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', (string) env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\auth.php
----------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\Utilisateur::class, // <-- ici
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the number of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\cache.php
----------------------------------------------------
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-cache-'),

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\database.php
----------------------------------------------------
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-database-'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\filesystems.php
----------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\logging.php
----------------------------------------------------
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', (string) env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\mail.php
----------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url((string) env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\queue.php
----------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\services.php
----------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\config\session.php
----------------------------------------------------
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel')).'-session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\database\factories\UtilisateurFactory.php
----------------------------------------------------
<?php

namespace Database\Factories;

use App\Models\Utilisateur;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class UtilisateurFactory extends Factory
{
    protected $model = Utilisateur::class;

    public function definition(): array
    {
        return [
            'nom_complet'    => $this->faker->name(),
            'email'          => $this->faker->unique()->safeEmail(),
            'mot_de_passe'   => Hash::make('password'),
            'tel_mobile'     => $this->faker->optional()->e164PhoneNumber(),
            'tel_fixe'       => $this->faker->optional()->e164PhoneNumber(),
            'role'           => 'chauffeur',
            'actif'          => 1,
            'remember_token' => Str::random(10),
        ];
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\database\migrations\0001_01_01_000000_create_users_table.php
----------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\database\migrations\0001_01_01_000001_create_cache_table.php
----------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\database\migrations\0001_01_01_000002_create_jobs_table.php
----------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\database\seeders\DatabaseSeeder.php
----------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            UtilisateurSeeder::class,
        ]);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\database\seeders\UtilisateurSeeder.php
----------------------------------------------------
<?php

namespace Database\Seeders;

use App\Models\Utilisateur;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;

class UtilisateurSeeder extends Seeder
{
    public function run(): void
    {
        Utilisateur::updateOrCreate(
            ['email' => 'admin@bems.test'],
            [
                'nom_complet' => 'Admin BEMS',
                'mot_de_passe' => Hash::make('password'),
                'role' => 'admin',
                'actif' => 1,
            ]
        );
        Utilisateur::updateOrCreate(
            ['email' => 'telephoniste@bems.test'],
            [
                'nom_complet' => 'Téléphoniste Démo',
                'mot_de_passe' => Hash::make('password'),
                'role' => 'telephoniste',
                'actif' => 1,
            ]
        );
        Utilisateur::updateOrCreate(
            ['email' => 'coordinateur@bems.test'],
            [
                'nom_complet' => 'Coordinateur Démo',
                'mot_de_passe' => Hash::make('password'),
                'role' => 'coordinateur',
                'actif' => 1,
            ]
        );
        Utilisateur::updateOrCreate(
            ['email' => 'chauffeur@bems.test'],
            [
                'nom_complet' => 'Chauffeur Démo',
                'mot_de_passe' => Hash::make('password'),
                'role' => 'chauffeur',
                'actif' => 1,
            ]
        );
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\public\index.php
----------------------------------------------------
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\auth\confirm-password.blade.php
----------------------------------------------------
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\auth\forgot-password.blade.php
----------------------------------------------------
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\auth\login.blade.php
----------------------------------------------------
{{-- resources/views/auth/login.blade.php --}}
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Association BEMS — Connexion</title>

  {{-- Pour un proto rapide : Tailwind CDN. (Remplace par @vite si tu as déjà Tailwind en local) --}}
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = { theme: { extend: { colors: { brand: { 500: "#0f172a"} } } } }
  </script>
</head>
<body class="min-h-screen bg-gray-50 antialiased text-gray-900">
  <div class="flex min-h-screen items-center justify-center py-10">
    <div class="w-full max-w-md">
      <!-- En-tête -->
      <div class="flex flex-col items-center mb-6">
        <div class="h-12 w-12 rounded-full bg-black/90 text-white flex items-center justify-center font-semibold">B</div>
        <h1 class="mt-3 text-lg font-semibold">Association BEMS</h1>
        <p class="text-sm text-gray-500">Portail – Connexion</p>
      </div>

      <!-- Carte -->
      <div class="rounded-2xl border border-gray-200 bg-white p-6 shadow-sm">
        @if ($errors->any())
          <div class="mb-4 rounded-lg border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
            <ul class="list-disc pl-5 space-y-1">
              @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
              @endforeach
            </ul>
          </div>
        @endif

        <form method="POST" action="{{ route('login.store') }}" class="space-y-4">
          @csrf

          <!-- Email -->
          <label class="block text-sm font-medium text-gray-700">Adresse e-mail</label>
          <div class="relative">
            <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
              <!-- Icône mail -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            </span>
            <input
              type="email"
              name="email"
              value="{{ old('email') }}"
              placeholder="nom@bems.ch"
              required
              class="w-full rounded-xl border border-gray-300 bg-white py-2.5 pl-10 pr-3 text-sm outline-none ring-0 focus:border-gray-400"
            />
          </div>

          <!-- Mot de passe -->
          <label class="block text-sm font-medium text-gray-700">Mot de passe</label>
          <div class="relative">
            <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
              <!-- Icône cadenas -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M16 11V7a4 4 0 10-8 0v4M5 11h14v8a2 2 0 01-2 2H7a2 2 0 01-2-2v-8z"/>
              </svg>
            </span>
            <input
              id="password"
              type="password"
              name="password"
              placeholder="•••••••"
              class="w-full rounded-xl border border-gray-300 bg-white py-2.5 pl-10 pr-10 text-sm outline-none ring-0 focus:border-gray-400"
            />
            <button type="button" id="togglePwd"
              class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
              aria-label="Afficher/Masquer le mot de passe">
              <!-- Icône œil -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                      d="M2 12s3.5-7 10-7 10 7 10 7-3.5 7-10 7S2 12 2 12z"/>
                <circle cx="12" cy="12" r="3" stroke-width="1.5" />
              </svg>
            </button>
          </div>

          <!-- Rôle -->
          <label class="block text-sm font-medium text-gray-700">Rôle</label>
          <div class="relative">
            <select name="role" class="w-full appearance-none rounded-xl border border-gray-300 bg-white py-2.5 pl-3 pr-10 text-sm outline-none focus:border-gray-400">
              <option value="" {{ old('role')==='' ? 'selected' : '' }}>—</option>
              <option value="admin" {{ old('role','admin')==='admin' ? 'selected' : '' }}>Admin</option>
              <option value="telephoniste" {{ old('role')==='telephoniste' ? 'selected' : '' }}>Téléphoniste</option>
              <option value="coordinateur" {{ old('role')==='coordinateur' ? 'selected' : '' }}>Coordinateur</option>
              <option value="chauffeur" {{ old('role')==='chauffeur' ? 'selected' : '' }}>Chauffeur</option>
            </select>
            <span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
              <!-- Icône chevron -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.061l-4.24 4.239a1 1 0 01-1.42 0L5.25 8.29a.75.75 0 01-.02-1.08z" clip-rule="evenodd" />
              </svg>
            </span>
          </div>

          <!-- Ligne options -->
          <div class="flex items-center justify-between">
            <label class="inline-flex items-center gap-2 text-sm text-gray-700">
              <input type="checkbox" name="remember" value="1" {{ old('remember', true) ? 'checked' : '' }}
                     class="h-4 w-4 rounded border-gray-300 text-gray-900 focus:ring-0">
              <span>Se souvenir de moi</span>
            </label>
            <a href="#" class="text-sm text-gray-500 hover:text-gray-700">Mot de passe oublié&nbsp;?</a>
          </div>

          <!-- Bouton -->
          <button type="submit"
                  class="mt-2 w-full rounded-xl bg-gray-900 py-2.5 text-sm font-semibold text-white hover:bg-black focus:outline-none">
            <span class="inline-flex items-center gap-2 justify-center">
              <!-- Icône flèche -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 12h14M13 5l7 7-7 7"/>
              </svg>
              Se connecter
            </span>
          </button>

          <p class="pt-2 text-center text-xs text-gray-500">
            En vous connectant, vous acceptez les conditions d'utilisation (prototype).
          </p>
        </form>
      </div>

      <!-- Pied de page -->
      <p class="mt-6 text-center text-xs text-gray-400">© 2025 BEMS – Prototype</p>
    </div>
  </div>
  <script>
    // Afficher / masquer le mot de passe
    document.getElementById('togglePwd')?.addEventListener('click', function () {
      const input = document.getElementById('password');
      if (!input) return;
      input.type = input.type === 'password' ? 'text' : 'password';
    });
  </script>
</body>
</html>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\auth\register.blade.php
----------------------------------------------------
<x-guest-layout>
    <form method="POST" action="{{ route('register') }}">
        @csrf

        <!-- Name -->
        <div>
            <x-input-label for="nom_complet" :value="__('Nom complet')" />
            <x-text-input id="nom_complet" class="block mt-1 w-full" type="text" name="nom_complet" :value="old('nom_complet')" required autofocus autocomplete="name" />
            <x-input-error :messages="$errors->get('nom_complet')" class="mt-2" />
        </div>

        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                            type="password"
                            name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('login') }}">
                {{ __('Already registered?') }}
            </a>

            <x-primary-button class="ms-4">
                {{ __('Register') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\auth\reset-password.blade.php
----------------------------------------------------
<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\auth\verify-email.blade.php
----------------------------------------------------
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\chauffeur\disponibilites\index.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('content')
<div class="max-w-5xl mx-auto p-4">
    <h1 class="text-lg font-semibold mb-4">Mes disponibilités</h1>

    @if(session('ok'))
        <div class="mb-3 rounded-lg border border-green-200 bg-green-50 text-green-800 px-3 py-2 text-sm">
            {{ session('ok') }}
        </div>
    @endif

    @if ($errors->any())
        <div class="mb-3 rounded-lg border border-red-200 bg-red-50 text-red-800 px-3 py-2 text-sm">
            <ul class="list-disc pl-5 space-y-1">
                @foreach ($errors->all() as $err)
                    <li>{{ $err }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    {{-- Formulaire d’ajout --}}
    <div class="rounded-xl border border-gray-200 bg-white p-4 shadow-sm">
        <form method="POST" action="{{ route('chauffeur.dispo.store') }}" class="grid grid-cols-1 md:grid-cols-12 gap-3 items-end">
            @csrf

            <div class="md:col-span-3">
                <label class="text-sm font-medium text-gray-700">Date</label>
                <input type="date" name="date" value="{{ request('date', $dateSelection) }}"
                       class="mt-1 w-full rounded-lg border-gray-300">
            </div>

            <div class="md:col-span-2">
                <label class="text-sm font-medium text-gray-700">Début</label>
                <input type="time" name="heure_debut" id="heure_debut"
                       class="mt-1 w-full rounded-lg border-gray-300" required>
            </div>

            <div class="md:col-span-2">
                <label class="text-sm font-medium text-gray-700">Fin</label>
                <input type="time" name="heure_fin" id="heure_fin"
                       class="mt-1 w-full rounded-lg border-gray-300" required>
            </div>

            <div class="md:col-span-3">
                <label class="text-sm font-medium text-gray-700">Presets</label>
                <div class="mt-1 flex flex-wrap gap-2">
                    <button type="button" data-preset="matin" class="px-3 py-1.5 rounded-lg border text-sm hover:bg-gray-50">Matin</button>
                    <button type="button" data-preset="apm" class="px-3 py-1.5 rounded-lg border text-sm hover:bg-gray-50">Après-midi</button>
                    <button type="button" data-preset="journee" class="px-3 py-1.5 rounded-lg border text-sm hover:bg-gray-50">Journée</button>
                </div>
            </div>

            <div class="md:col-span-2">
                <label class="text-sm font-medium text-gray-700">Répéter</label>
                <label class="mt-1 flex items-center gap-2 text-sm">
                    <input type="checkbox" name="repeter" value="1" class="rounded border-gray-300">
                    <span>Toutes les semaines (4)</span>
                </label>
            </div>

            <div class="md:col-span-12">
                <button type="submit"
                        class="inline-flex items-center gap-2 rounded-lg bg-gray-900 text-white px-4 py-2 text-sm hover:bg-black">
                    Ajouter
                </button>
            </div>
        </form>
    </div>

    {{-- Liste du jour sélectionné (inchangée) --}}
    <div class="mt-4 rounded-xl border border-gray-200 bg-white shadow-sm">
        <div class="flex items-center justify-between px-4 py-3 border-b">
            <div class="font-semibold">Aujourd'hui</div>
            <form method="POST" action="{{ route('chauffeur.dispo.destroyJour') }}">
                @csrf
                @method('DELETE')
                <input type="hidden" name="date" value="{{ $dateSelection }}">
                <button class="text-xs px-3 py-1.5 rounded-lg border border-red-200 text-red-600 hover:bg-red-50">
                    Tout supprimer ce jour
                </button>
            </form>
        </div>

        <div class="overflow-x-auto">
            <table class="min-w-full text-sm">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-2 text-left text-gray-600 font-medium">Début</th>
                        <th class="px-4 py-2 text-left text-gray-600 font-medium">Fin</th>
                        <th class="px-4 py-2 text-right text-gray-600 font-medium">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @forelse($creneauxDuJour as $c)
                        <tr class="border-t">
                            <td class="px-4 py-2">{{ \Illuminate\Support\Carbon::parse($c->heure_debut)->format('H:i') }}</td>
                            <td class="px-4 py-2">{{ \Illuminate\Support\Carbon::parse($c->heure_fin)->format('H:i') }}</td>
                            <td class="px-4 py-2 text-right">
                                <form method="POST" action="{{ route('chauffeur.dispo.destroy', $c->id) }}">
                                    @csrf @method('DELETE')
                                    <button class="text-xs px-3 py-1.5 rounded-lg border border-red-200 text-red-600 hover:bg-red-50">
                                        Supprimer
                                    </button>
                                </form>
                            </td>
                        </tr>
                    @empty
                        <tr class="border-t">
                            <td colspan="3" class="px-4 py-6 text-center text-gray-500">Aucun créneau ce jour.</td>
                        </tr>
                    @endforelse
                </tbody>
            </table>
        </div>
    </div>

    {{-- NOUVEAU : Mes prochaines disponibilités (toutes à venir / en cours) --}}
    <div class="mt-6 rounded-xl border border-gray-200 bg-white shadow-sm">
        <div class="px-4 py-3 border-b font-semibold">
            Mes prochaines disponibilités
        </div>

        <div class="divide-y">
            @php
                $grouped = $prochainesDispos->groupBy(fn($c) => \Illuminate\Support\Carbon::parse($c->date_jour)->toDateString());
            @endphp

            @forelse($grouped as $jour => $items)
                <div class="px-4 py-3">
                    <div class="text-sm font-medium text-gray-700 mb-2">{{ $jour }}</div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full text-sm">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-2 text-left text-gray-600 font-medium">Début</th>
                                    <th class="px-4 py-2 text-left text-gray-600 font-medium">Fin</th>
                                    <th class="px-4 py-2 text-right text-gray-600 font-medium">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($items as $c)
                                    <tr class="border-t">
                                        <td class="px-4 py-2">{{ \Illuminate\Support\Carbon::parse($c->heure_debut)->format('H:i') }}</td>
                                        <td class="px-4 py-2">{{ \Illuminate\Support\Carbon::parse($c->heure_fin)->format('H:i') }}</td>
                                        <td class="px-4 py-2 text-right">
                                            <form method="POST" action="{{ route('chauffeur.dispo.destroy', $c->id) }}">
                                                @csrf @method('DELETE')
                                                <button class="text-xs px-3 py-1.5 rounded-lg border border-red-200 text-red-600 hover:bg-red-50">
                                                    Supprimer
                                                </button>
                                            </form>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            @empty
                <div class="px-4 py-6 text-center text-gray-500">
                    Aucune disponibilité à venir.
                </div>
            @endforelse
        </div>
    </div>
</div>

<script>
document.querySelectorAll('[data-preset]').forEach(btn => {
    btn.addEventListener('click', () => {
        const type = btn.getAttribute('data-preset');
        const d = document.getElementById('heure_debut');
        const f = document.getElementById('heure_fin');
        if (!d || !f) return;

        if (type === 'matin')       { d.value = '08:00'; f.value = '12:00'; }
        else if (type === 'apm')    { d.value = '13:00'; f.value = '18:00'; }
        else if (type === 'journee'){ d.value = '08:00'; f.value = '18:00'; }
    });
});
</script>
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\chauffeur\planning\semaine.blade.php
----------------------------------------------------
@extends('layouts.app')
@section('contenu')
  <h1 class="text-lg font-semibold mb-2">Mon planning — Semaine</h1>
  <p class="text-sm text-gray-500">Placeholder : la liste des courses attribuées apparaîtra ici.</p>
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\application-logo.blade.php
----------------------------------------------------
<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\auth-session-status.blade.php
----------------------------------------------------
@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\danger-button.blade.php
----------------------------------------------------
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\dropdown-link.blade.php
----------------------------------------------------
<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\dropdown.blade.php
----------------------------------------------------
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
$alignmentClasses = match ($align) {
    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
    'top' => 'origin-top',
    default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};

$width = match ($width) {
    '48' => 'w-48',
    default => $width,
};
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\input-error.blade.php
----------------------------------------------------
@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\input-label.blade.php
----------------------------------------------------
@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700']) }}>
    {{ $value ?? $slot }}
</label>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\modal.blade.php
----------------------------------------------------
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\nav-link.blade.php
----------------------------------------------------
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\primary-button.blade.php
----------------------------------------------------
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 focus:bg-gray-700 active:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\responsive-nav-link.blade.php
----------------------------------------------------
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 text-start text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\secondary-button.blade.php
----------------------------------------------------
<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\components\text-input.blade.php
----------------------------------------------------
@props(['disabled' => false])

<input @disabled($disabled) {{ $attributes->merge(['class' => 'border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm']) }}>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\coordinateur\courses\a_attribuer.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('title', 'Attribution des courses')

@section('contenu')
  <div class="flex items-center justify-between mb-4">
    <h1 class="text-lg font-semibold">Attribution des courses</h1>
    <a href="{{ route('coordinateur.courses.planifiees') }}" class="text-sm px-3 py-1.5 rounded bg-gray-100">
      Voir les courses planifiées
    </a>
  </div>

  @if (session('status'))
    <div class="mb-4 p-3 rounded border border-green-200 bg-green-50 text-green-700">
      {{ session('status') }}
    </div>
  @endif

  @if ($courses->isEmpty())
    <div class="p-6 bg-white border rounded-lg text-sm text-gray-600">
      Aucune course à attribuer.
    </div>
  @else
    <div class="overflow-auto bg-white border rounded-lg">
      <table class="min-w-full text-sm">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-3 py-2 border-b text-left">Date</th>
            <th class="px-3 py-2 border-b text-left">Heure</th>
            <th class="px-3 py-2 border-b text-left">Client</th>
            <th class="px-3 py-2 border-b text-left">Départ</th>
            <th class="px-3 py-2 border-b text-left">Arrivée</th>
            <th class="px-3 py-2 border-b text-left">Type</th>
            <th class="px-3 py-2 border-b text-left">Attribuer</th>
          </tr>
        </thead>
        <tbody>
          @foreach ($courses as $course)
            <tr class="odd:bg-white even:bg-gray-50">
              <td class="px-3 py-2 border-b">{{ $course->date_service }}</td>
              <td class="px-3 py-2 border-b">{{ \Illuminate\Support\Str::of($course->heure_depart)->substr(0,5) }}</td>
              <td class="px-3 py-2 border-b">
                {{-- si relation client() définie, sinon adapte --}}
                @if (method_exists($course, 'client') && $course->relationLoaded('client'))
                  {{ $course->client?->nom }} {{ $course->client?->prenom }}
                @else
                  #{{ $course->client_id }}
                @endif
              </td>
              <td class="px-3 py-2 border-b">{{ $course->adresse_depart }}</td>
              <td class="px-3 py-2 border-b">{{ $course->adresse_arrivee }}</td>
              <td class="px-3 py-2 border-b">{{ $course->type_course }}</td>
              <td class="px-3 py-2 border-b">
                <form method="POST" action="{{ route('coordinateur.courses.attribuer', $course) }}" class="flex items-center gap-2">
                  @csrf
                  <select name="chauffeur_id" class="border rounded px-2 py-1">
                    @foreach ($chauffeurs as $ch)
                      <option value="{{ $ch->id }}">{{ $ch->nom_complet }}</option>
                    @endforeach
                  </select>
                  <button class="px-3 py-1.5 rounded bg-gray-900 text-white">Attribuer</button>
                </form>
              </td>
            </tr>
          @endforeach
        </tbody>
      </table>
    </div>

    <div class="mt-4">
      {{ $courses->links() }}
    </div>
  @endif
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\coordinateur\courses\planifiees.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('title', 'Courses planifiées')

@section('contenu')
  <div class="flex items-center justify-between mb-4">
    <h1 class="text-lg font-semibold">Courses planifiées</h1>
    <a href="{{ route('coordinateur.courses.a_attribuer') }}" class="text-sm px-3 py-1.5 rounded bg-gray-100">
      Retour à l’attribution
    </a>
  </div>

  @if ($courses->isEmpty())
    <div class="p-6 bg-white border rounded-lg text-sm text-gray-600">
      Aucune course planifiée.
    </div>
  @else
    <div class="overflow-auto bg-white border rounded-lg">
      <table class="min-w-full text-sm">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-3 py-2 border-b text-left">Date</th>
            <th class="px-3 py-2 border-b text-left">Heure</th>
            <th class="px-3 py-2 border-b text-left">Client</th>
            <th class="px-3 py-2 border-b text-left">Chauffeur</th>
            <th class="px-3 py-2 border-b text-left">Départ</th>
            <th class="px-3 py-2 border-b text-left">Arrivée</th>
            <th class="px-3 py-2 border-b text-left">Statut</th>
          </tr>
        </thead>
        <tbody>
          @foreach ($courses as $course)
            <tr class="odd:bg-white even:bg-gray-50">
              <td class="px-3 py-2 border-b">{{ $course->date_service }}</td>
              <td class="px-3 py-2 border-b">{{ \Illuminate\Support\Str::of($course->heure_depart)->substr(0,5) }}</td>
              <td class="px-3 py-2 border-b">
                @if ($course->relationLoaded('client'))
                  {{ $course->client?->nom }} {{ $course->client?->prenom }}
                @else
                  #{{ $course->client_id }}
                @endif
              </td>
              <td class="px-3 py-2 border-b">
                @if ($course->relationLoaded('chauffeur'))
                  {{ $course->chauffeur?->nom_complet }}
                @else
                  #{{ $course->chauffeur_id }}
                @endif
              </td>
              <td class="px-3 py-2 border-b">{{ $course->adresse_depart }}</td>
              <td class="px-3 py-2 border-b">{{ $course->adresse_arrivee }}</td>
              <td class="px-3 py-2 border-b">{{ $course->statut }}</td>
            </tr>
          @endforeach
        </tbody>
      </table>
    </div>

    <div class="mt-4">
      {{ $courses->links() }}
    </div>
  @endif
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\dashboard.blade.php
----------------------------------------------------
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\errors\403.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('title', 'Accès refusé')

@section('contenu')
  <div class="max-w-xl mx-auto bg-white border rounded-lg p-6">
    <h1 class="text-lg font-semibold mb-2">Accès refusé (403)</h1>
    <p class="text-sm text-gray-600">
      Vous n’avez pas les droits pour accéder à cette page.
    </p>

    <div class="mt-4 flex gap-2">
      <a href="{{ route('tableau') }}" class="px-3 py-1.5 rounded bg-gray-900 text-white">Retour au tableau</a>
      @if(auth()->check())
        <form method="POST" action="{{ route('logout') }}">
          @csrf
          <button class="px-3 py-1.5 rounded bg-gray-100">Se déconnecter</button>
        </form>
      @endif
    </div>
  </div>
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\layouts\app.blade.php
----------------------------------------------------
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <title>@yield('title', 'BEMS')</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    {{-- Tailwind via Vite (si configuré) ou CDN le temps du dev --}}
    @vite(['resources/css/app.css','resources/js/app.js'])
    {{-- <script src="https://cdn.tailwindcss.com"></script> --}}
</head>
<body class="bg-gray-50 text-gray-900 antialiased">
<div class="min-h-screen flex">
    @auth
        @include('layouts.partials.sidebar')
    @endauth

    <main class="flex-1 min-h-screen">
        {{-- En-tête minimal (optionnel) --}}
        @auth
            <div class="h-16 bg-white border-b border-gray-200 flex items-center justify-between px-4">
                <div class="text-sm text-gray-600">
                    Connecté comme <span class="font-medium text-gray-900">{{ auth()->user()->nom_complet }}</span>
                    <span class="text-gray-400">—</span>
                    <span class="uppercase text-xs text-gray-500">{{ auth()->user()->role }}</span>
                </div>
            </div>
        @endauth

        <div class="p-6">
            @yield('contenu')
        </div>
    </main>
</div>
</body>
</html>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\layouts\guest.blade.php
----------------------------------------------------
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="font-sans text-gray-900 antialiased">
        <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
            <div>
                <a href="/">
                    <x-application-logo class="w-20 h-20 fill-current text-gray-500" />
                </a>
            </div>

            <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
                {{ $slot }}
            </div>
        </div>
    </body>
</html>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\layouts\navigation.blade.php
----------------------------------------------------
<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="{{ route('tableau') }}">
                        <x-application-logo class="block h-9 w-auto fill-current text-gray-800" />
                    </a>
                </div>

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('tableau')" :active="request()->routeIs('tableau')">
                        {{ __('Tableau') }}
                    </x-nav-link>
                </div>
            </div>

            <!-- Right Side -->
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                @auth
                    <!-- Settings Dropdown (connecté) -->
                    <x-dropdown align="right" width="48">
                        <x-slot name="trigger">
                            <button class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150">
                                <div>{{ Auth::user()->name }}</div>
                                <div class="ms-1">
                                    <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </button>
                        </x-slot>

                        <x-slot name="content">
                            @if (Route::has('profile.edit'))
                                <x-dropdown-link :href="route('profile.edit')">
                                    {{ __('Profil') }}
                                </x-dropdown-link>
                            @endif

                            <!-- Authentication -->
                            <form method="POST" action="{{ route('logout') }}">
                                @csrf
                                <x-dropdown-link :href="route('logout')"
                                        onclick="event.preventDefault(); this.closest('form').submit();">
                                    {{ __('Déconnexion') }}
                                </x-dropdown-link>
                            </form>
                        </x-slot>
                    </x-dropdown>
                @endauth

                @guest
                    <!-- Liens simples (non connecté) -->
                    @if (Route::has('login'))
                        <a href="{{ route('login') }}" class="text-sm text-gray-600 underline me-4">Se connecter</a>
                    @endif
                    @if (Route::has('register'))
                        <a href="{{ route('register') }}" class="text-sm text-gray-600 underline">Créer un compte</a>
                    @endif
                @endguest
            </div>

            <!-- Hamburger -->
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 focus:text-gray-500 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{ 'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{ 'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Responsive Menu -->
    <div :class="{ 'block': open, 'hidden': ! open }" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('tableau')" :active="request()->routeIs('tableau')">
                {{ __('Tableau') }}
            </x-responsive-nav-link>
        </div>

        <!-- Responsive Settings Options -->
        @auth
            <div class="pt-4 pb-1 border-t border-gray-200">
                <div class="px-4">
                    <div class="font-medium text-base text-gray-800">{{ Auth::user()->name }}</div>
                    <div class="font-medium text-sm text-gray-500">{{ Auth::user()->email }}</div>
                </div>

                <div class="mt-3 space-y-1">
                    @if (Route::has('profile.edit'))
                        <x-responsive-nav-link :href="route('profile.edit')">
                            {{ __('Profil') }}
                        </x-responsive-nav-link>
                    @endif
                    <form method="POST" action="{{ route('logout') }}">
                        @csrf
                        <x-responsive-nav-link :href="route('logout')"
                                onclick="event.preventDefault(); this.closest('form').submit();">
                            {{ __('Déconnexion') }}
                        </x-responsive-nav-link>
                    </form>
                </div>
            </div>
        @endauth

        @guest
            <div class="pt-4 pb-1 border-t border-gray-200">
                <div class="mt-3 space-y-1 px-4">
                    @if (Route::has('login'))
                        <a href="{{ route('login') }}" class="block text-sm text-gray-600 underline">Se connecter</a>
                    @endif
                    @if (Route::has('register'))
                        <a href="{{ route('register') }}" class="block text-sm text-gray-600 underline">Créer un compte</a>
                    @endif
                </div>
            </div>
        @endguest
    </div>
</nav>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\layouts\partials\sidebar.blade.php
----------------------------------------------------
@php
  use Illuminate\Support\Facades\Route;

  // Rôle réel de l'utilisateur connecté
  $role = auth()->user()->role ?? null;

  // Lien "safe" (si la route n'existe pas encore pendant le dev)
  function lien($name, $fallback = '#') {
      return Route::has($name) ? route($name) : $fallback;
  }

  // État actif pour le menu
  function actif($patterns) {
      foreach ((array)$patterns as $p) {
          if (request()->routeIs($p)) return 'bg-blue-50 text-blue-700';
      }
      return 'text-gray-700 hover:bg-gray-50';
  }
  function iconeClasse($patterns) {
      return request()->routeIs(...(array)$patterns) ? 'text-blue-600' : 'text-gray-400 group-hover:text-gray-600';
  }
@endphp

<aside class="w-64 h-screen bg-white border-r border-gray-200 flex flex-col">
  <div class="h-16 flex items-center px-4 border-b border-gray-200">
    <span class="text-lg font-bold text-gray-800">Association BEMS</span>
  </div>

  <nav class="flex-1 overflow-y-auto py-4">
    <ul class="space-y-1">

      {{-- COMMUN : Tableau de bord --}}
      <li>
        <a href="{{ lien('tableau') }}"
           class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('tableau') }}">
            <i class='bx bx-home' ></i>
          <span>Tableau de bord</span>
        </a>
      </li>

      @if($role === 'telephoniste')
        {{-- Téléphoniste : Import Excel, Historique --}}
        <li>
          <a href="{{ lien('telephoniste.import.nouveau') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('telephoniste.import.*') }}">
            <i class='bx bx-import' ></i>
            <span>Import Excel</span>
          </a>
        </li>
        <li>
          <a href="{{ lien('telephoniste.imports.index') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('telephoniste.imports.index') }}">
            <i class='bx bx-book-open' ></i>
            <span>Historique</span>
          </a>
        </li>

      @elseif($role === 'coordinateur')
        {{-- Coordinateur : Attribution, Planning Chauffeur --}}
        <li>
          <a href="{{ lien('coordinateur.courses.a_attribuer') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('coordinateur.courses.a_attribuer') }}">
            <i class='bx bx-calendar-plus' ></i>
            <span>Attribution des courses</span>
          </a>
        </li>
        <li>
          <a href="{{ lien('coordinateur.courses.planifiees') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('coordinateur.courses.planifiees') }}">
            <i class='bx bx-calendar'></i>
            <span>Planning Chauffeur</span>
          </a>
        </li>

      @elseif($role === 'chauffeur')
        {{-- Chauffeur : Mon planning, Disponibilités --}}
        <li>
          <a href="{{ lien('chauffeur.planning.semaine') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('chauffeur.planning.*') }}">
            <i class='bx bx-calendar'></i>
            <span>Mon planning</span>
          </a>
        </li>
        <li>
          <a href="{{ lien('chauffeur.dispo.index') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('chauffeur.dispo.*') }}">
            <i class='bx bx-stopwatch'></i>
            <span>Disponibilités</span>
          </a>
        </li>

      @elseif($role === 'admin')
        {{-- Admin : Bénévoles, Clients, Destinations, Utilisateurs --}}
        <li>
          <a href="{{ lien('admin.benevoles.index') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('admin.benevoles.*') }}">
            <i class='bx bx-group'></i>
            <span>Bénévoles</span>
          </a>
        </li>
        <li>
          <a href="{{ lien('admin.clients.index') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('admin.clients.*') }}">
            <i class='bx bx-male-female'></i>
            <span>Clients</span>
          </a>
        </li>
        <li>
          <a href="{{ lien('admin.destinations.index') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('admin.destinations.*') }}">
            <i class='bx bx-map'></i>
            <span>Destinations</span>
          </a>
        </li>
        <li>
          <a href="{{ lien('admin.utilisateurs.index') }}"
             class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('admin.utilisateurs.*') }}">
            <i class='bx bxs-user-detail'></i>
            <span>Utilisateurs</span>
          </a>
        </li>
      @endif

      {{-- Commun : Mon profil / Paramètres --}}
      <li class="pt-4 mt-4 border-t text-xs uppercase tracking-wider text-gray-400 px-3">Compte</li>

      <li>
        <a href="{{ lien('profile.edit') }}"
           class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('profile.*') }}">
            <i class='bx bx-user'></i>
          <span>Mon profil</span>
        </a>
      </li>
      <li>
        <a href="{{ lien('parametres.index') }}"
           class="group flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium {{ actif('parametres.*') }}">
            <i class='bx bx-cog' ></i>
          <span>Paramètre</span>
        </a>
      </li>

      {{-- Déconnexion --}}
      <li class="px-3">
        <form method="POST" action="{{ route('logout') }}" class="mt-2">
          @csrf
          <button type="submit"
                  class="w-full text-left flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium text-red-600 hover:bg-red-50">
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M16 13v-2H7V8l-5 4 5 4v-3h9Z M20 3h-8v2h8v14h-8v2h8a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2Z"/></svg>
            Se déconnecter
          </button>
        </form>
      </li>
    </ul>
  </nav>
</aside>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\layouts\partials\topbar.blade.php
----------------------------------------------------
@php
  $roleActuel = session('role_visuel', auth()->user()->role ?? 'telephoniste');
@endphp

<header class="h-16 bg-white border-b border-gray-200 flex items-center justify-between px-4">
  <div class="text-sm text-gray-500">
    Connecté comme : <span class="font-medium text-gray-900">{{ auth()->user()->nom_complet ?? 'Utilisateur' }}</span>
  </div>

  <div class="flex items-center gap-3">
    {{-- Sélecteur de rôle visuel (pour adapter la sidebar) --}}
    <form action="{{ route('role.switch') }}" method="POST">
      @csrf
      <select name="role_visuel" class="border rounded px-2 py-1 text-sm" onchange="this.form.submit()">
        @foreach (['telephoniste'=>'Téléphoniste','coordinateur'=>'Coordinateur','chauffeur'=>'Chauffeur','admin'=>'Admin'] as $val => $lib)
          <option value="{{ $val }}" {{ $roleActuel===$val ? 'selected' : '' }}>{{ $lib }}</option>
        @endforeach
      </select>
    </form>
  </div>
</header>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\profile\edit.blade.php
----------------------------------------------------
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-profile-information-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-password-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.delete-user-form')
                </div>
            </div>
        </div>
    </div>
</x-app-layout>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\profile\partials\delete-user-form.blade.php
----------------------------------------------------
<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Delete Account') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>

    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>

    <x-modal name="confirm-user-deletion" :show="$errors->userDeletion->isNotEmpty()" focusable>
        <form method="post" action="{{ route('profile.destroy') }}" class="p-6">
            @csrf
            @method('delete')

            <h2 class="text-lg font-medium text-gray-900">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>

            <p class="mt-1 text-sm text-gray-600">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>

            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />

                <x-text-input
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />

                <x-input-error :messages="$errors->userDeletion->get('password')" class="mt-2" />
            </div>

            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>

                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\profile\partials\update-password-form.blade.php
----------------------------------------------------
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Update Password') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->updatePassword->get('current_password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'password-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\profile\partials\update-profile-information-form.blade.php
----------------------------------------------------
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Profile Information') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __("Update your account's profile information and email address.") }}
        </p>
    </header>

    <form id="send-verification" method="post" action="{{ route('verification.send') }}">
        @csrf
    </form>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input id="name" name="name" type="text" class="mt-1 block w-full" :value="old('name', $user->name)" required autofocus autocomplete="name" />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>

        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" name="email" type="email" class="mt-1 block w-full" :value="old('email', $user->email)" required autocomplete="username" />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />

            @if ($user instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! $user->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800">
                        {{ __('Your email address is unverified.') }}

                        <button form="send-verification" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            {{ __('Click here to re-send the verification email.') }}
                        </button>
                    </p>

                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600">
                            {{ __('A new verification link has been sent to your email address.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'profile-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\tableau.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('contenu')
  <h1 class="text-xl font-semibold mb-4">Tableau de bord</h1>
  <ul class="list-disc ml-6">
    <li><a class="text-blue-600 underline" href="{{ route('telephoniste.import.nouveau') }}">Import Téléphoniste</a></li>
    <li><a class="text-blue-600 underline" href="{{ url('/telephoniste/imports') }}">Historique Imports</a></li>
  </ul>
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\telephoniste\import\index.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('title','Import des courses')

@section('content')
  <h1 class="text-lg font-semibold mb-2">Import des courses (Excel)</h1>
  <p class="text-sm text-gray-500 mb-4">
    Dépose un fichier <strong>.xlsx</strong> (onglet <em>Transfert</em>). Les courses seront créées avec statut
    <em>importé</em> et sans chauffeur (colonne « Transporteur » ignorée).
  </p>

  {{-- Messages d'erreur / statut --}}
  @if ($errors->any())
    <div class="p-3 mb-4 bg-red-50 text-red-700 border border-red-200 rounded">
      <ul class="list-disc ml-5">
        @foreach($errors->all() as $e)
          <li>{{ $e }}</li>
        @endforeach
      </ul>
    </div>
  @endif

  @if(session('status'))
    <div class="p-3 mb-4 bg-green-50 text-green-700 border border-green-200 rounded">
      {{ session('status') }}
    </div>
  @endif

  {{-- 1) FORMULAIRE DE PRÉVISUALISATION --}}
  <div class="bg-white border rounded-lg p-6 mb-6">
    <form id="form-previsu"
          action="{{ route('telephoniste.import.previsualiser') }}"
          method="POST"
          enctype="multipart/form-data"
          class="space-y-4">
      @csrf

      <div>
        <label class="block text-sm mb-2 font-medium">Fichier Excel (.xlsx)</label>
        <input type="file"
               id="fichier"
               name="fichier"
               accept=".xlsx,.xls"
               required
               class="block w-full border rounded px-3 py-2">
        <p class="text-xs text-gray-500 mt-1">Onglet attendu : <em>Transfert</em>. Les autres onglets sont ignorés.</p>
      </div>

      <div class="flex items-center gap-3">
        <button type="submit"
                id="btn-previsu"
                class="px-4 py-2 bg-gray-900 text-white rounded-lg disabled:opacity-50"
                disabled>
          Prévisualiser
        </button>

        <a href="{{ route('telephoniste.imports.index') }}"
           class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg">
          Historique
        </a>
      </div>
    </form>
  </div>

  {{-- 2) APERÇU + BOUTON DE CONFIRMATION (après prévisualisation) --}}
  @if(session('previsualisation') && session('headers'))
    <div class="bg-white border rounded-lg p-6">
      <div class="flex items-center justify-between mb-3">
        <h2 class="font-medium">
          Aperçu (20 premières lignes) — {{ session('fichier_nom') }}
        </h2>
        <span class="text-xs text-gray-500">
          Lignes affichées : {{ count(session('previsualisation', [])) }}
        </span>
      </div>

      <div class="overflow-auto border rounded">
        <table class="min-w-full text-xs md:text-sm">
          <thead class="bg-gray-50">
            <tr>
              @foreach(session('headers') as $h)
                <th class="px-3 py-2 border-b text-left font-medium text-gray-600 whitespace-nowrap">{{ $h }}</th>
              @endforeach
            </tr>
          </thead>
          <tbody>
            @foreach(session('previsualisation') as $i => $row)
              <tr class="odd:bg-white even:bg-gray-50">
                @foreach(session('headers') as $h)
                  <td class="px-3 py-2 border-b align-top whitespace-nowrap">{{ $row[$h] ?? '' }}</td>
                @endforeach
              </tr>
            @endforeach
          </tbody>
        </table>
      </div>

      <form action="{{ route('telephoniste.import.confirmer') }}" method="POST" class="mt-4">
        @csrf
        <input type="hidden" name="token_import" value="{{ session('token_import') }}">
        <button class="px-4 py-2 bg-green-600 text-white rounded-lg">
          Confirmer l’import
        </button>
      </form>
    </div>
  @endif

  <script>
    (function(){
      const input = document.getElementById('fichier');
      const btn   = document.getElementById('btn-previsu');
      if (input && btn) {
        input.addEventListener('change', () => {
          btn.disabled = !input.files || input.files.length === 0;
        });
      }
    })();
  </script>
@endsection


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\resources\views\telephoniste\imports\historique.blade.php
----------------------------------------------------
@extends('layouts.app')

@section('title','Historique des imports')

@section('content')
  <div class="flex items-center justify-between mb-4">
    <h1 class="text-lg font-semibold">Historique des imports</h1>
    <a href="{{ route('telephoniste.import.nouveau') }}"
       class="px-3 py-2 rounded-lg bg-gray-900 text-white text-sm">Nouvel import</a>
  </div>

  @if (session('status'))
    <div class="mb-4 p-3 rounded border border-green-200 bg-green-50 text-green-700">
      {{ session('status') }}
    </div>
  @endif

  @php
    // Détection "vide" compatible paginator / collection / array
    $vide = false;
    if ($lots instanceof \Illuminate\Pagination\LengthAwarePaginator || $lots instanceof \Illuminate\Contracts\Pagination\Paginator) {
        $vide = (($lots->total() ?? 0) === 0);
    } elseif ($lots instanceof \Illuminate\Support\Collection) {
        $vide = $lots->isEmpty();
    } else {
        $vide = empty($lots);
    }
  @endphp

  @if ($vide)
    <div class="p-6 bg-white border rounded-lg text-sm text-gray-600">
      Aucun import pour l’instant.
    </div>
  @else
    <div class="overflow-auto bg-white border rounded-lg">
      <table class="min-w-full text-sm">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-3 py-2 border-b text-left">#</th>
            <th class="px-3 py-2 border-b text-left">Fichier</th>
            <th class="px-3 py-2 border-b text-left">Importé par</th>
            <th class="px-3 py-2 border-b text-left">Début</th>
            <th class="px-3 py-2 border-b text-left">Fin</th>
            <th class="px-3 py-2 border-b text-right">Total</th>
            <th class="px-3 py-2 border-b text-right text-green-700">OK</th>
            <th class="px-3 py-2 border-b text-right text-red-700">Erreurs</th>
            <th class="px-3 py-2 border-b text-left">Journal</th>
          </tr>
        </thead>
        <tbody>
          @foreach ($lots as $lot)
            <tr class="odd:bg-white even:bg-gray-50">
              <td class="px-3 py-2 border-b align-top">#{{ $lot->id }}</td>
              <td class="px-3 py-2 border-b align-top">{{ $lot->fichier_source }}</td>
              <td class="px-3 py-2 border-b align-top">
                {{ $lot->importeur?->nom_complet ?? '—' }}
              </td>
              <td class="px-3 py-2 border-b align-top">
                {{ optional($lot->commence_le)->format('d.m.Y H:i') ?? '—' }}
              </td>
              <td class="px-3 py-2 border-b align-top">
                {{ optional($lot->termine_le)->format('d.m.Y H:i') ?? '—' }}
              </td>
              <td class="px-3 py-2 border-b align-top text-right">{{ $lot->lignes_total }}</td>
              <td class="px-3 py-2 border-b align-top text-right text-green-700 font-medium">{{ $lot->lignes_ok }}</td>
              <td class="px-3 py-2 border-b align-top text-right text-red-700 font-medium">{{ $lot->lignes_erreur }}</td>
              <td class="px-3 py-2 border-b align-top">
                @php $j = $lot->journal ?? []; @endphp
                @if (empty($j))
                  <span class="text-gray-400">—</span>
                @else
                  <details class="text-xs">
                    <summary class="cursor-pointer text-gray-700">Voir</summary>
                    <ul class="list-disc ml-5 mt-1 space-y-1">
                      @foreach ($j as $ligne)
                        <li>{{ $ligne }}</li>
                      @endforeach
                    </ul>
                  </details>
                @endif
              </td>
            </tr>
          @endforeach
        </tbody>
      </table>
    </div>

    <div class="mt-4">
      {{-- Liens de pagination si paginator --}}
      @if ($lots instanceof \Illuminate\Pagination\AbstractPaginator)
        {{ $lots->links() }}
      @endif
    </div>
  @endif
@endsection





====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\api.php
----------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;

Route::get('/health', fn () => ['ok' => true]);


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\auth.php
----------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Utilisateur;

Route::get('/login', function () {
    return view('auth.login');
})->name('login');

Route::post('/login', function (Request $request) {
    $request->validate([
        'email' => ['required', 'email'],
        'role'  => ['nullable', 'in:admin,telephoniste,coordinateur,chauffeur'],
    ]);

    $user = Utilisateur::where('email', $request->input('email'))->first();
    if (!$user) {
        return back()->withErrors(['email' => 'Utilisateur introuvable.'])->withInput();
    }

    $remember = (bool) $request->boolean('remember');
    Auth::login($user, $remember);

    if ($request->filled('role')) {
        $request->session()->put('role_visuel', $request->input('role'));
    }

    $request->session()->regenerate();

    return redirect()->intended(route('tableau'));
})->name('login.store');

Route::post('/logout', function (Request $request) {
    Auth::logout();
    $request->session()->forget('role_visuel');
    $request->session()->invalidate();
    $request->session()->regenerateToken();
    return redirect()->route('accueil');
})->name('logout');


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\console.php
----------------------------------------------------
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\roles\admin.php
----------------------------------------------------


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\roles\chauffeur.php
----------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Chauffeur\DisponibiliteController;

Route::middleware(['auth','role:chauffeur'])
    ->prefix('chauffeur')
    ->name('chauffeur.')
    ->group(function () {

        // Page disponibilités
        Route::get('disponibilites', [DisponibiliteController::class, 'index'])
            ->name('dispo.index');

        // Ajouter un créneau (avec option "toutes les semaines")
        Route::post('disponibilites', [DisponibiliteController::class, 'store'])
            ->name('dispo.store');

        // Supprimer un créneau précis
        Route::delete('disponibilites/{id}', [DisponibiliteController::class, 'destroy'])
            ->name('dispo.destroy');

        // Supprimer tous les créneaux d’une date
        Route::delete('disponibilites-jour', [DisponibiliteController::class, 'destroyJour'])
            ->name('dispo.destroyJour');
    });


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\roles\coordinateur.php
----------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Coordinateur\AttributionController;

Route::middleware(['auth', 'role:coordinateur'])
    ->prefix('coordinateur')
    ->name('coordinateur.')
    ->group(function () {
        Route::get('courses/a-attribuer', [AttributionController::class, 'index'])
            ->name('courses.a_attribuer');

        Route::get('courses/planifiees', [AttributionController::class, 'planifiees'])
            ->name('courses.planifiees');

        Route::post('courses/{course}/attribuer', [AttributionController::class, 'attribuer'])
            ->name('courses.attribuer');
    });


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\roles\telephoniste.php
----------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Telephoniste\ImportCoursController;
use App\Http\Controllers\Telephoniste\HistoriqueImportController;

Route::middleware(['auth','role:telephoniste'])
    ->prefix('telephoniste')->name('telephoniste.')
    ->group(function () {

        Route::get('imports', [HistoriqueImportController::class, 'index'])
            ->name('imports.index');

        Route::get('imports/nouveau', [ImportCoursController::class, 'index'])
            ->name('import.nouveau');

        Route::post('imports/previsualiser', [ImportCoursController::class, 'previsualiser'])
            ->name('import.previsualiser');

        Route::post('imports/confirmer', [ImportCoursController::class, 'confirmer'])
            ->name('import.confirmer');
    });


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\routes\web.php
----------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\RedirectionController;

// Accueil -> login direct
Route::redirect('/', '/login')->name('accueil');

// Tableau de bord générique : redirige selon le rôle réel
Route::middleware('auth')->get('/tableau', [RedirectionController::class, 'apresLogin'])->name('tableau');
Route::middleware('auth')->get('/dashboard', [RedirectionController::class, 'apresLogin'])->name('dashboard');

// Inclusion des routes par rôle (protégées dans chaque fichier)
foreach (['admin', 'telephoniste', 'coordinateur', 'chauffeur'] as $fichier) {
    $path = __DIR__."/roles/{$fichier}.php";
    if (file_exists($path)) require $path;
}

// Auth (Breeze/Fortify/etc.)
require __DIR__.'/auth.php';


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\Auth\AuthenticationTest.php
----------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
    use RefreshDatabase;

    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/login');

        $response->assertStatus(200);
    }

    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard', absolute: false));
    }

    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $this->post('/login', [
            'email' => $user->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }

    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/logout');

        $this->assertGuest();
        $response->assertRedirect('/');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\Auth\EmailVerificationTest.php
----------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;

class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_email_verification_screen_can_be_rendered(): void
    {
        $user = User::factory()->unverified()->create();

        $response = $this->actingAs($user)->get('/verify-email');

        $response->assertStatus(200);
    }

    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->unverified()->create();

        Event::fake();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );

        $response = $this->actingAs($user)->get($verificationUrl);

        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(route('dashboard', absolute: false).'?verified=1');
    }

    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->unverified()->create();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );

        $this->actingAs($user)->get($verificationUrl);

        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\Auth\PasswordConfirmationTest.php
----------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PasswordConfirmationTest extends TestCase
{
    use RefreshDatabase;

    public function test_confirm_password_screen_can_be_rendered(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('/confirm-password');

        $response->assertStatus(200);
    }

    public function test_password_can_be_confirmed(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'password',
        ]);

        $response->assertRedirect();
        $response->assertSessionHasNoErrors();
    }

    public function test_password_is_not_confirmed_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'wrong-password',
        ]);

        $response->assertSessionHasErrors();
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\Auth\PasswordResetTest.php
----------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class PasswordResetTest extends TestCase
{
    use RefreshDatabase;

    public function test_reset_password_link_screen_can_be_rendered(): void
    {
        $response = $this->get('/forgot-password');

        $response->assertStatus(200);
    }

    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class);
    }

    public function test_reset_password_screen_can_be_rendered(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) {
            $response = $this->get('/reset-password/'.$notification->token);

            $response->assertStatus(200);

            return true;
        });
    }

    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) use ($user) {
            $response = $this->post('/reset-password', [
                'token' => $notification->token,
                'email' => $user->email,
                'password' => 'password',
                'password_confirmation' => 'password',
            ]);

            $response
                ->assertSessionHasNoErrors()
                ->assertRedirect(route('login'));

            return true;
        });
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\Auth\PasswordUpdateTest.php
----------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;

    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }

    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'wrong-password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('updatePassword', 'current_password')
            ->assertRedirect('/profile');
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\Auth\RegistrationTest.php
----------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_registration_screen_can_be_rendered(): void
    {
        $response = $this->get('/register');

        $response->assertStatus(200);
    }

    public function test_new_users_can_register(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard', absolute: false));
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\ExampleTest.php
----------------------------------------------------
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Feature\ProfileTest.php
----------------------------------------------------
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;

    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->get('/profile');

        $response->assertOk();
    }

    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => 'test@example.com',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $user->refresh();

        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }

    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => $user->email,
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertNotNull($user->refresh()->email_verified_at);
    }

    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->delete('/profile', [
                'password' => 'password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/');

        $this->assertGuest();
        $this->assertNull($user->fresh());
    }

    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->delete('/profile', [
                'password' => 'wrong-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('userDeletion', 'password')
            ->assertRedirect('/profile');

        $this->assertNotNull($user->fresh());
    }
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\TestCase.php
----------------------------------------------------
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}


====================================================
📄 Fichier : C:\xampp\htdocs\Projet_bems_laravel\bems\tests\Unit\ExampleTest.php
----------------------------------------------------
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}


